%%%%% Taking snips and putting them in format for UltraMegaSort to start
%%%%% processing with. Must be in matrix form: trialsxsamplesxchannels,
%%%%% where channels is number of channels on any particular N-trode.
%     The normal function ss_detect places the following fields in the spikes object:
%       SPIKES.WAVEFORMS : [events X SAMPLES X CHANNELS] matrix of event waveforms
%       SPIKES.TRIALS:  array containing which trial the event was observed
%       SPIKES.SPIKETIMES: array containing time within trial of each event
%       SPIKES.UNWRAPPED_TIMES: array of time within experiments (assumes a
%       short, specified delay between trials)
%       SPIKES.INFO.DETECT: structure containing information on detect
%       session - see manual for more details.
% In the following code, we will populate the spikes struct with the above stuff
% manually, thus enabling the rest of the code to be run properly.
%

%  load ('D:\Users\zeiss\Documents\T70data\data_block_T70_Cat_D1_allblocksTSonly.mat',...
%      'TimeStamps', 'Waves','SpkData');
% %load ('C:\Users\dhaks_000\Desktop\BMIfiles\data_block_T49_58.mat',...
% %'TimeStamps', 'Waves','Fs_lfp','wave');
%SpkData = SpkData(1:100000,:)';
%%

% clear s* d* c* t* o* wf p* c* m* i*
% ts = [];
% wf = [];
% count = 0;
%tet=1;
%chs = [(tet*4)-3:(tet*4)];

 clear all;clc;
%%%%%%%%%%%%%%%%Tetrode 1
for tet=1:16
    
    clear s* d* c* ts* o* wf p* c* m* i* 
    
    load ('D:\Users\zeiss\Documents\T70data\data_block_T70_Cat_D1_15_17_20TS.mat',...
     'TimeStamps', 'Waves','SpkData');
    ts = [];
    wf = [];
    
    chs = [(tet*4)-3:(tet*4)];
    spkdata{1}=SpkData(1:10000,chs);
    ts = TimeStamps{tet,2};
    wf= Waves{tet,2};
    clear TimeStamps Waves SpkData;

    count = 0;
%     for i = 2%:size(TimeStamps,2)
%         if (~isnan(TimeStamps{tet,i}(1)) & ~isnan(Waves{tet,i}(1)))
%             count=count+1;
%             ts = [ts TimeStamps{tet,i}];
%             wf = [wf Waves{tet,i}];
%         end
%     end
%     
   
    spikes = ss_default_params(24414.1);
    outl1=find(min(wf)<-0.0005);
    outl2=find(max(wf)>0.0005);
    outl = [outl1 outl2];
    
    ts(outl)=[];
    wf(:,outl)=[];
    [ts_sorted,sortidx] = sort(ts);
    wf=wf(:,sortidx);
    nullwf = [31,32; 63,64 ; 95,96];
    wf(nullwf,:)=[];
    
    spikes.spiketimes = ts_sorted;
    
    %%%% Setting default spike paramaters
    num_channels=4;
    num_trials=1;
    spikes.params.window_size = 1.2;
    spikes.params.max_jitter = 0.4;
    spikes.params.max_cross_time = 0.3;
    spikes.params.shadow = 0;
    
    
    %%%%%%%%%Sort1 Thresholds and Channels
    [thr,idx] = min(wf);
    pkch=zeros(1,length(thr));
    pkch(idx<=30)=1;
    pkch(idx>30&idx<=60)=2;
    pkch(idx>60&idx<=90)=3;
    pkch(idx>90)=4;
    
    thresh1 = -.0003; thresh2 = -.0005; thresh3 = -.0005; thresh4 = -.0003;
    
    idx(idx>30 & idx<=60) =  idx(idx>30 & idx<=60)-30;
    idx(idx>60 & idx<=90) =  idx(idx>60 & idx<=90)-60;
    idx(idx>90) = idx(idx>90)-90;
    
    if sum(pkch==1)>0
        thresh1 = max(thr(pkch==1));
    end
    
    if sum(pkch==2)>0
        thresh2 = max(thr(pkch==2));
    end
    if sum(pkch==3)>0
        thresh3 = max(thr(pkch==3));
    end
    
    if sum(pkch==4)>0
        thresh4 = max(thr(pkch==4));
    end
    
    %%%%%filling up info in spikes struct that should have been created using default script
    
    
    spikes.trials = ones(1,size(wf,2));
    spikes.unwrapped_times = spikes.spiketimes;
    
    spikes.waveforms(:,:,1) = wf(1:30,:)';
    spikes.waveforms(:,:,2) = wf(31:60,:)';
    spikes.waveforms(:,:,3) = wf(61:90,:)';
    spikes.waveforms(:,:,4) = wf(91:120,:)';
    
    spikes.info.detect.align_sample = 3;
    %spikes.info.detect.dur = length(wave)/Fs_lfp;
    spikes.info.detect.dur = ts_sorted(end)-ts_sorted(1);
    spikes.info.detect.event_channel = [pkch]';
    spikes.info.detect.thresh = [thresh1 thresh2 thresh3 thresh3];
    
    
    % ch1d = wf(1:30,find(pkch~=1));
    % ch2d = wf(31:60,find(pkch~=2));
    % ch3d = wf(61:90,find(pkch~=3));
    % ch4d = wf(91:120,find(pkch~=4));
    % ml = min([length(ch1d),length(ch2d),length(ch3d),length(ch4d)]);
    %
    % d(:,1)=reshape(ch1d(:,1:ml),[1 ml*30]);
    % d(:,1)=reshape(ch2d(:,1:ml),[1 ml*30]);
    % d(:,3)=reshape(ch3d(:,1:ml),[1 ml*30]);
    % d(:,4)=reshape(ch4d(:,1:ml),[1 ml*30]);
    %
    %
    % data{1} = d;
     % spkdata{1} =SpkData(chs,:)';
    spikes.info.detect.cov = get_covs_tmp(spkdata,30);
    stds = zeros([1 num_channels]);
    for j = 1:num_trials
        stds = stds + std(spkdata{j});
    end
    spikes.info.detect.stds =  stds;
    
    spikes = ss_align(spikes);
    spikes = ss_kmeans(spikes);
    spikes = ss_energy(spikes);
    spikes = ss_aggregate(spikes);
    filename = ['Tet ' num2str(tet)];
    save (filename,'spikes');
end
    %%
%     % main tool
    spikes.params.display.max_autocorr_to_display = 0.1;
    spikes.params.display.max_isi_to_display = 0.1;
    spikes.params.display.isi_bin_size = 1;
    spikes.params.display.correlations_bin_size = 2;
    spikes.params.display.show_outliers=0;
    
    splitmerge_tool(spikes)
    
%     splitmerge_tool(spikes2)
%     
%     %%
%     % stand alone outlier tool
%     outlier_tool(spikes)
%     
%     
%     % Note: In the code below, "clus", "clus1", "clus2", and "clus_list" are dummy
%     % variables.  The user should fill in these vlaues with cluster IDs found
%     % in the SPIKES object after running the algorithm above.
%     %
%     
%     % plots for single clusters
%     plot_waveforms( spikes,[20,52]);
%     
%     plot_waveforms( spikes,52);
%     
%     plot_stability( spikes, clus);
%     plot_residuals( spikes,clus);
%     plot_isi( spikes, clus );
%     plot_detection_criterion( spikes, clus );
%     
%     % comparison plots
%     plot_fld( spikes,clus1,clus2);
%     plot_xcorr( spikes, clus1, clus2 );
%     
%     % whole data plots
%     clus_list=[20,52];
%     
%     plot_features(spikes );
%     plot_aggtree(spikes);
%     show_clusters(spikes, [clus_list]);
%     compare_clusters(spikes, [clus_list]);
%     
%     % outlier manipulation (see M-files for description on how to use)
%     spikes = remove_outliers( spikes, which );
%     spikes = reintegrate_outliers( spikes, indices, mini );
%     
%     % quality metric functions
%     %
%     % Note: There are versions of these functions in the quality_measures
%     % directory that have an interface that does not depend on the SPIKES
%     % structure.  These are for use by people who only want to use the quality
%     % metrics but do not want to use the rest of the package for sorting.
%     % These functions have the same names as below but without the "ss_" prefix.
%     %
%     FN1 = ss_censored( spikes, 20 );
%     FP1 = ss_rpv_contamination( spikes, 20  );
%     FN2 = ss_undetected(spikes,20);
%     
%     FN1b = ss_censored( spikes,52);
%     FP1b = ss_rpv_contamination( spikes,52);
%     FN2b = ss_undetected(spikes,52);
%     
%     confusion_matrix = ss_gaussian_overlap( spikes, 20, 52 ); % call for every pair of clusters
%     
%     
%     
%     
